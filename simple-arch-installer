#!/bin/bash

# To connect to wifi:
#    iwctl station wlan0 connect "networkname"
# To install big font:
#    setfont solar24x32
# To copy archlinux ios to device
#    dd if=archlinux.iso of=/dev/sdb bs=4M
set -eo pipefail
trap quit:no_message INT

INSTALL_SCRIPT=install_os.sh
EDITOR=vim

select_disk() {
   select ENTRY in $(ls /dev/disk/by-id/ | grep -v '\-part*');
       do
           DISK="/dev/disk/by-id/$ENTRY"
           break
       done
}

if [ -z "$DISK" ]; then
    select_disk
fi

grep MemTotal /proc/meminfo
read -p "Enter swap size (ex: 0 or 1024MiB or 8GiB): " SWAPSIZE
read -p "Full disk wipe (y/n): " FULLDISKWIPE
read -p "Enter hostname: " HOSTNAME
read -p "Enter username: " USERNAME
read -p "Enter dotfiles repository (ex: prabirshrestha/dotfiles): " DOTFILESREPO
[ -d /sys/firmware/efi ] && IS_EFI=true || IS_EFI=false
if cat /proc/cpuinfo | grep "model name" | grep -q "Intel"; then
    ISINTEL=true
fi
if cat /proc/cpuinfo | grep "model name" | grep -q "Amd"; then
    ISAMD=true
fi

write_script() {
	(
        echo "#!/usr/bin/env bash"
        echo "#"
        echo "# Please review the install script below"
        echo "#"
        echo "set -euo pipefail"
        echo
        echo "export DISK=$DISK"
        echo "export BOOTDISK=\"\${DISK}-part1\""
        echo "export ROOTDISK=\"\${DISK}-part2\""
        echo "export SWAPSIZE=$SWAPSIZE"
        echo "export FULLDISKWIPE=$FULLDISKWIPE"
        echo "export IS_EFI=$IS_EFI"
        echo "export USERNAME=$USERNAME"
        echo "export HOSTNAME=$HOSTNAME"
        echo "export DOTFILESREPO=$DOTFILESREPO"
        echo "export ISINTEL=$ISINTEL"
        echo "export ISAMD=$ISAMD"
        echo "export REFINDTIMEOUT=3"
        echo
        echo "password1=x"
        echo "password2=y"
        echo "until [[ \$password1 == \$password2 ]]; do"
        echo "  read -s -p \"Enter disk password: \" password1"
        echo "  echo"
        echo "  read -s -p \"Re-Enter disk password: \" password2"
        echo "  echo"
        echo "  DISKPASSWORD=\$password1"
        echo "done"
        echo "password1=x"
        echo "password2=y"
        echo "until [[ \$password1 == \$password2 ]]; do"
        echo "  read -s -p \"Enter user password: \" password1"
        echo "  echo"
        echo "  read -s -p \"Re-Enter user password: \" password2"
        echo "  echo"
        echo "  USERPASSWORD=\$password1"
        echo "done"
        echo
        echo "timedatectl set-ntp true"
        echo "curl -s https://eoli3n.github.io/archzfs/init | bash"
        echo
        echo "[ \"\${FULLDISKWIPE}\" = \"y\" ] && pv --timer --rate --stop-at-size -s \"\$(blockdev --getsize64 \$DISK)\" /dev/zero > \$DISK"
        echo "sgdisk --zap-all \$DISK # zap anything existing"
        echo "sgdisk -o \$DISK # write a new GPT partition with protective MBR"
        echo
        echo "# Partition 1: 512M. EFI System Partition and Legacy BIOS boot with Legacy BOOT ON"
        echo "sgdisk -n 1:1M:+512M \$DISK   # create partition 1 - first 512M"
        echo "sgdisk -t 1:EF00 \$DISK       # Set partition type to ESP"
        echo "sgdisk -A 1:set:2 \$DISK      # Turn legacy boot attribute on"
        echo "sgdisk -c:1:BOOT \$DISK       # Set partition name to BOOT"
        echo
        echo "# Partition 2: 0:0. ZFS Linux System Partition"
        echo "sgdisk -n 2:0:0 \$DISK        # Partition 2 - everything but the first 512M"
        echo "sgdisk -t 2:BE00 \$DISK       # Set partition type to Linux"
        echo "sgdisk -c:2:ZROOT \$DISK      # Set partition name to ZROOT"
        echo
        echo "[ ! -f /etc/hostid ] && zgenhostid # generate /etc/hostid"
        echo "sleep 1"
        echo
        echo "# create zfs pool"
        echo "echo -n \"\$DISKPASSWORD\" | zpool create -O encryption=aes-256-gcm -O keylocation=prompt -O keyformat=passphrase -O mountpoint=none -O relatime=on -O compression=lz4 -O acltype=posixacl zroot \$ROOTDISK"
        echo "zpool set cachefile=/etc/zfs/zpool.cache zroot"
        echo "zfs create -o mountpoint=none zroot/ROOT"
        echo "zfs create -o mountpoint=/ zroot/ROOT/default"
        echo "zfs create -o mountpoint=none zroot/DATA"
        echo "zfs create -o mountpoint=/home zroot/DATA/home"
        echo "swapoff -a"
        echo "zpool export zroot"
        echo "zpool import -R /mnt zroot"
        echo "[[ \"\$DISKPASSWORD\" != \"\" ]] && echo -n \"\$DISKPASSWORD\" | zfs load-key zroot"
        echo "zfs mount -la"
        echo
        echo "mkfs.fat -F32 \$BOOTDISK"
        echo "mkdir -p /mnt/boot/efi"
        echo "mount \$BOOTDISK /mnt/boot/efi"
        echo
        echo "pacstrap /mnt base linux linux-firmware"
        echo "mkdir /mnt/etc/zfs"
        echo "cp /etc/zfs/zpool.cache /mnt/etc/zfs/zpool.cache"
        echo "cat << EOF >> /mnt/etc/fstab"
        echo "UUID=\"\$(blkid -s UUID -o value \$BOOTDISK)\" /boot/efi vfat defaults 0 0"
        echo "EOF"
        echo
        echo "arch-chroot /mnt sh <<EOF"
        echo "  pacman-key --init"
        echo "  pacman-key --populate archlinux"
        echo
        echo "  pacman-key --recv-keys F75D9D76"
        echo "  pacman-key --lsign-key F75D9D76"
        echo "  echo '[archzfs]' >> /etc/pacman.conf"
        echo "  echo 'Server = https://archzfs.com/\\\$repo/\\\$arch' >> /etc/pacman.conf"
        echo
        echo "  pacman -Syu --noconfirm"
        echo "  pacman -S --noconfirm archzfs-linux"
        echo "  zpool set cachefile=/etc/zfs/zpool.cache zroot"
        echo "  systemctl enable zfs.target zfs-import-cache zfs-mount zfs-import.target"
        echo
        echo "  ln -sf /usr/share/zoneinfo/America/Los_Angeles /etc/localtime"
        echo "  hwclock --systohc"
        echo "  timedatectl set-ntp true"
        echo "  sed -i 's/#en_US.UTF/en_US.UTF/' /etc/locale.gen"
        echo "  locale-gen"
        echo "  echo \$HOSTNAME > /etc/hostname"
        echo "  echo '127.0.0.1 localhost' > /etc/hosts"
        echo "  echo '::1       localhost' >> /etc/hosts"
        echo "  echo '127.0.0.1 \${HOSTNAME}.localdomain \${HOSTNAME}' >> /etc/hosts"
        echo
        echo "  pacman -S --noconfirm efibootmgr"
        echo "  mkdir -p /boot/efi/EFI/zbm"
        echo "  curl -L https://github.com/zbm-dev/zfsbootmenu/releases/download/v1.12.0/zfsbootmenu-release-vmlinuz-x86_64-v1.12.0.EFI -o /boot/efi/EFI/zbm/zfsbootmenu.EFI"
        echo "  efibootmgr --disk \$BOOTDISK --part 1 --create --label \"ZFSBootMenu\" --loader '\EFI\zbm\zfsbootmenu.EFI' --unicode \"spl_hostid=\$(hostid) zbm.timeout=3 zbm.prefer=zroot zbm.import_policy=hostid quiet\" --verbose"
        echo "  zfs set org.zfsbootmenu:commandline=\"rw\" zroot/ROOT"
        echo "  zfs set org.zfsbootmenu:commandline=\"rw\" zroot/ROOT/default"
        echo "  zfs set canmount=noauto zroot/ROOT"
        echo "  zfs set canmount=noauto zroot/ROOT/default"
        echo "  pacman -S --noconfirm intel-ucode"
        echo "  if [ "\$ISINTEL" == \"true\" ]; then pacman -S --noconfirm intel-ucode xf86-video-intel libva-intel-driver; fi;"
        echo
        echo "  chmod 700 /boot"
        echo "  chmod 600 /boot/*"
        echo "  chmod 700 /boot/efi"
        echo
	echo "  sed -i 's/^MODULES=.*/MODULES=(i915 intel_agp)/' /etc/mkinitcpio.conf"
        echo "  sed -i \"s|^HOOKS=.*|HOOKS=(base udev autodetect modconf keyboard block zfs filesystems)|g\" /etc/mkinitcpio.conf"
        echo "  mkinitcpio -p linux"
        echo
        echo "  pacman -S --noconfirm sudo"
        echo "  sed -i '/%wheel ALL=(ALL:ALL) ALL/s/^#//' /etc/sudoers"
        echo "  useradd -m -g users -G wheel \$USERNAME"
        echo "  chown -R \$USERNAME /home/\$USERNAME"
        echo "  passwd -d \"\$USERNAME\""
        echo
        echo "  pacman -S --noconfirm git base-devel"
        echo "  cd /tmp && curl -O https://aur.archlinux.org/cgit/aur.git/snapshot/paru-bin.tar.gz && tar -xvf paru-bin.tar.gz && chmod 777 paru-bin && cd paru-bin"
        echo "  su \"\$USERNAME\" -c \"makepkg -sirc --noconfirm && paru -S --noconfirm paru-bin\""
        echo "  cd /tmp && rm -rf /tmp/paru-bin"
	echo
        echo "  pacman -S --noconfirm networkmanager"
        echo "  systemctl enable NetworkManager"
        echo
	echo "  pacman -S --noconfirm base-devel gvim"
        echo "  pacman -S --noconfirm xorg xfce4 xfce4-goodies"
        echo "  pacman -S --noconfirm sddm; systemctl enable sddm.service"
        echo
        echo "  su \"\$USERNAME\" -c \"paru -S --noconfirm google-chrome\""
        echo
        echo "  echo \"\$USERNAME:\$USERPASSWORD\" | chpasswd"
        echo "  passwd -l root"
        echo "  zfs snapshot -r zroot@install"
        echo "EOF"
        echo
        echo "umount /mnt/boot/efi"
	echo "zfs umount -a"
        echo "zpool export zroot"
        echo
        echo "echo \"OS setup complete. Please 'reboot' your machine.\""
    ) > "$INSTALL_SCRIPT"
    chmod +x "$INSTALL_SCRIPT"
}

write_script

# open editor to review and make last changes to the script
"$EDITOR" "$INSTALL_SCRIPT"
reset

clear

read -p "Are you sure you want to run the OS installer script (YES is capital letter to run): " RUN_INSTALLER
if [ "$RUN_INSTALLER" == "YES" ]; then
    bash "$INSTALL_SCRIPT"
else
    echo "Cancelling installation"
fi
