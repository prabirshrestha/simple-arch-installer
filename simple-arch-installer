#!/bin/bash

# To connect to wifi:
#    iwctl station wlan0 connect "networkname"
# To install big font:
#    setfont solar24x32
# To copy archlinux ios to device
#    dd if=archlinux.iso of=/dev/sdb bs=4M
set -eo pipefail
trap quit:no_message INT

INSTALL_SCRIPT=install_os.sh
EDITOR=vim

#pacman-key --init
#pacman-key --populate archlinux
#pacman-key --refresh

select_disk() {
   select ENTRY in $(ls /dev/disk/by-id/ | grep -v '\-part*');
       do
           DISK="/dev/disk/by-id/$ENTRY"
           break
       done
}

if [ -z "$DISK" ]; then
    select_disk
fi

grep MemTotal /proc/meminfo
read -p "Enter swap size (ex: 0 or 1024MiB or 8GiB): " SWAPSIZE
read -p "Full disk wipe (y/n): " FULLDISKWIPE
read -p "Enter hostname: " HOSTNAME
read -p "Enter username: " USERNAME
read -p "Enter dotfiles repository (ex: prabirshrestha/dotfiles): " DOTFILESREPO
[ -d /sys/firmware/efi ] && IS_EFI=true || IS_EFI=false
if cat /proc/cpuinfo | grep "model name" | grep -q "Intel"; then
    ISINTEL=true
fi
if cat /proc/cpuinfo | grep "model name" | grep -q "Amd"; then
    ISAMD=true
fi

write_script() {
	(
        echo "#!/usr/bin/env bash"
        echo "#"
        echo "# Please review the install script below"
        echo "#"
        echo "set -euo pipefail"
        echo
        echo "export DISK=$DISK"
        echo "export BOOTDISK=\"\${DISK}-part1\""
        echo "export ROOTDISK=\"\${DISK}-part2\""
        echo "export SWAPSIZE=$SWAPSIZE"
        echo "export FULLDISKWIPE=$FULLDISKWIPE"
        echo "export IS_EFI=$IS_EFI"
        echo "export USERNAME=$USERNAME"
        echo "export HOSTNAME=$HOSTNAME"
        echo "export DOTFILESREPO=$DOTFILESREPO"
        echo "export ISINTEL=$ISINTEL"
        echo "export ISAMD=$ISAMD"
        echo "export REFINDTIMEOUT=3"
        echo
        echo "password1=x"
        echo "password2=y"
        echo "until [[ \$password1 == \$password2 ]]; do"
        echo "  read -s -p \"Enter disk password: \" password1"
        echo "  echo"
        echo "  read -s -p \"Re-Enter disk password: \" password2"
        echo "  echo"
        echo "  DISKPASSWORD=\$password1"
        echo "done"
        echo "password1=x"
        echo "password2=y"
        echo "until [[ \$password1 == \$password2 ]]; do"
        echo "  read -s -p \"Enter user password: \" password1"
        echo "  echo"
        echo "  read -s -p \"Re-Enter user password: \" password2"
        echo "  echo"
        echo "  USERPASSWORD=\$password1"
        echo "done"
        echo
        echo "timedatectl set-ntp true"
        echo "curl -s https://eoli3n.github.io/archzfs/init | bash"
        echo
        echo "[ \"\${FULLDISKWIPE}\" = \"y\" ] && pv --timer --rate --stop-at-size -s \"\$(blockdev --getsize64 \$DISK)\" /dev/zero > $DISK"
        echo "sgdisk --zap-all \$DISK # zap anything existing"
        echo "sgdisk -o \$DISK # write a new GPT partition with protective MBR"
        echo
        echo "# Partition 1: 512M. EFI System Partition and Legacy BIOS boot with Legacy BOOT ON"
        echo "sgdisk -n 1:1M:+512M \$DISK   # create partition 1 - first 512M"
        echo "sgdisk -t 1:EF00 \$DISK       # Set partition type to ESP"
        echo "sgdisk -A 1:set:2 \$DISK      # Turn legacy boot attribute on"
        echo "sgdisk -c:1:BOOT \$DISK       # Set partition name to BOOT"
        echo
        echo "# Partition 2: 0:0. ZFS Linux System Partition"
        echo "sgdisk -n 2:0:0 \$DISK        # Partition 2 - everything but the first 512M"
        echo "sgdisk -t 2:BE00 \$DISK       # Set partition type to Linux"
        echo "sgdisk -c:2:ZROOT \$DISK      # Set partition name to ZROOT"
        echo
        echo "[ ! -f /etc/hostid ] && zgenhostid # generate /etc/hostid"
        echo "sleep 1"
        echo
        echo "# create zfs pool"
        echo "if [[ \"\$DISKPASSWORD\" == \"\" ]]; then"
        echo "  ZFSENCRYPTIONOPTIONS="
        echo "else"
        echo "  ZFSENCRYPTIONOPTIONS=\"-O encryption=aes-256-gcm -O keylocation=prompt -O keyformat=passphrase\""
        echo "fi"
        echo "echo -n \"\$DISKPASSWORD\" | zpool create -f -o ashift=12 \\"
        echo "  -O acltype=posixacl       \\"
        echo "  -O relatime=on            \\"
        echo "  -O xattr=sa               \\"
        echo "  -O dnodesize=legacy       \\"
        echo "  -O normalization=formD    \\"
        echo "  -O mountpoint=none        \\"
        echo "  -O canmount=off           \\"
        echo "  -O devices=off            \\"
        echo "  \$ZFSENCRYPTIONOPTIONS    \\"
        echo "  -R /mnt                   \\"
        echo "  zroot \$ROOTDISK"
        echo
        echo "zfs create -o mountpoint=none -o canmount=off         zroot/ROOT"
        echo "zfs create -o mountpoint=/ -o canmount=noauto         zroot/ROOT/default"
        echo "zfs create -o mountpoint=none                         zroot/DATA"
        echo "zfs create -o mountpoint=/home                        zroot/DATA/home"
        echo "zfs create -o mountpiont=/root                        zroot/DATA/home/root"
        echo "zfs create -o mountpiont=/home/\$USERNAME             zroot/DATA/home/\$USERNAME"
        echo "zfs create -o mountpiont=/local                       zroot/DATA/local"
        echo "zfs create -o mountpoint=/var -o canmount=off         zroot/DATA/var"
        echo "zfs create -o mountpoint=/var/log                     zroot/DATA/var/log"
        echo "zfs create -o mountpoint=/var/lib -o canmount=off     zroot/DATA/var/lib"
        echo "zfs create -o mountpoint=/var/lib/docker              zroot/DATA/var/lib/docker"
        echo "zpool set bootfs=zroot/ROOT/default zroot"
        echo
        echo "zfs umount -a"
        echo "rm -rf /mnt/*"
        echo "zpool export zroot"
        echo "zpool import -d /dev/disk/by-id -R /mnt zroot -N"
        echo "[[ \"\$DISKPASSWORD\" != \"\" ]] && echo -n \"\$DISKPASSWORD\" | zfs load-key zroot"
        echo "zfs mount zroot/ROOT/default"
        echo "zfs mount -a"
        echo "mount | grep mnt # verify that everything is mounted correctly"
        echo "zpool set cachefile=/etc/zfs/zpool.cache zroot"
        echo
        echo "pacstrap /mnt base base-devel zfs-linux linux-headers zfs-utils"
        echo "tee -a /mnt/etc/pacman.conf <<EOF"
        echo "[archzfs]"
        echo "Server = https://archzfs.com/\\\$repo/\\\$arch"
        echo "EOF"
        echo "arch-chroot /mnt pacman-key -r DDF7DB817396A49B2A2723F7403BD972F75D9D76"
        echo "arch-chroot /mnt pacman-key --lsign-key DDF7DB817396A49B2A2723F7403BD972F75D9D76"
        echo "arch-chroot /mnt pacman -Sy --noconfirm"
        echo
        echo "echo \"LANG=en_US.UTF-8\" > /mnt/etc/locale.conf"
        echo "sed -i 's/#en_US.UTF/en_US.UTF/' /mnt/etc/locale.gen"
        echo "arch-chroot /mnt hwclock --systohc"
        echo "arch-chroot /mnt timedatectl set-ntp true"
        echo "arch-chroot /mnt timedatectl set-timezone America/Los_Angeles"
        echo "arch-chroot /mnt locale-gen"
        echo "echo \$HOSTNAME > /mnt/etc/hostname"
	echo "echo -e \"127.0.0.1 localhost\n::1 localhost\" >> /mnt/etc/hosts"
        echo
        echo "cp /etc/hostid /mnt/etc/hostid"
        echo "mkdir -p /mnt/etc/zfs"
        echo "cp /etc/zfs/zpool.cache /mnt/etc/zfs/zpool.cache"
        echo "arch-chroot /mnt systemctl enable zfs.target"
        echo "arch-chroot /mnt systemctl enable zfs-import-cache"
        echo "arch-chroot /mnt systemctl enable zfs-mount"
        echo "arch-chroot /mnt systemctl enable zfs-import.target"
        echo
        echo "arch-chroot /mnt pacman -Sy --noconfirm archlinux-keyring"
        echo "if [ "\$ISINTEL" != \"true\" ]; then arch-chroot /mnt pacman -S --noconfirm intel-ucode; fi;"
        echo "if [ "\$ISAMD" != \"true\" ]; then arch-chroot /mnt pacman -S --noconfirm amd-ucode; fi;"
        echo
        echo "# enable sudoers and create user"
        echo "arch-chroot /mnt sh <<EOF"
        echo "  echo '%wheel ALL=(ALL) ALL' | sudo EDITOR='tee -a' visudo"
        echo "  useradd -Nm -g users -G wheel,sys \"\$USERNAME\""
        echo "  chown -R \$USERNAME /home/\$USERNAME"
        echo "  passwd -d \"\$USERNAME\""
        echo "EOF"
        echo
        echo "# install paru-bin"
        echo "arch-chroot /mnt bash <<EOF"
        echo "  pacman -S --noconfirm git"
        echo "  cd /tmp"
        echo "  curl -O https://aur.archlinux.org/cgit/aur.git/snapshot/paru-bin.tar.gz"
        echo "  tar -xvf paru-bin.tar.gz"
        echo "  chmod 777 paru-bin"
        echo "  cd paru-bin"
        echo "  su \"\$USERNAME\" -c \"makepkg -sirc --noconfirm\""
        echo "EOF"
        echo
        echo "mkfs.vfat -F32 -n BOOT \$BOOTDISK"
        echo "if [[ \"\$IS_EFI\" == \"true\" ]]; then"
        echo "  cat << EOF >> /mnt/etc/fstab"
        echo "UUID=\"\$(blkid -s UUID -o value \$BOOTDISK)\" /boot/efi vfat defaults 0 0"
        echo "EOF"
        echo "  arch-chroot /mnt mkdir /boot/efi"
        echo "  arch-chroot /mnt mount /boot/efi"
        echo "  arch-chroot /mnt pacman -S --noconfirm refind"
        echo "  arch-chroot /mnt refind-install"
        echo "  sed -i 's,timeout 20,timeout \$REFINDTIMEOUT,' /mnt/boot/efi/EFI/refind/refind.conf"
        echo "  arch-chroot /mnt mkdir -p /boot/efi/EFI/arch"
        echo "  cat <<- EOF > /mnt/boot/efi/EFI/arch/refind_linux.conf"
        echo "\"Boot default\"  \"zbm.prefer=zroot zbm.import_policy=hostid zbm.set_hostid rw quiet loglevel=0 zbm.skip\""
        echo "\"Boot to menu\"  \"zbm.prefer=zroot zbm.import_policy=hostid zbm.set_hostid rw quiet loglevel=0 zbm.show\""
        echo "EOF"
        echo "fi"
        echo "arch-chroot /mnt zfs set org.zfsbootmenu:commandline='rw quiet' zroot/ROOT"
        echo
        echo "echo \"MODULES=\\\"\\\"\" > /mnt/etc/mkinitcpio.conf"
        echo "echo \"BINARIES=\\\"\\\"\" >> /mnt/etc/mkinitcpio.conf"
        echo "echo \"FILES=\\\"\\\"\" >> /mnt/etc/mkinitcpio.conf"
        echo "echo \"HOOKS=\\\"base udev autodetect modconf block keyboard keymap zfs filesystems\\\"\" >> /mnt/etc/mkinitcpio.conf"
        echo "echo \"COMPRESSION=\\\"zstd\\\"\" >> /mnt/etc/mkinitcpio.conf"
        echo
        echo "arch-chroot /mnt mkinitcpio -P"
        echo "# Install the ZFSBootMenu package"
        echo "arch-chroot /mnt bash <<EOF"
        echo " pacman -S --noconfirm cpanminus kexec-tools fzf util-linux"
        echo " rm -rf /tmp/zfsbootmenu && mkdir -p /tmp/zfsbootmenu"
        echo " cd /tmp/zfsbootmenu && curl -L https://github.com/zbm-dev/zfsbootmenu/tarball/master | tar xz --strip=1 && make install && cpanm --notest --installdeps ."
        echo "EOF"
        echo "if [[ \"\$IS_EFI\" == \"true\" ]]; then"
        echo "cat <<-EOF > /mnt/etc/zfsbootmenu/config.yaml"
        echo "Global:"
        echo "  ManageImages: true"
        echo "  BootMountPoint: /boot/efi"
        echo "  InitCPIO: true"
        echo "Components:"
        echo "  Enabled: false"
        echo "EFI:"
        echo "  ImageDir: /boot/efi/EFI/arch"
        echo "  Versions: 2"
        echo "  Enabled: true"
        echo "Kernel:"
        echo "  CommandLine: zbm.prefer=zroot zbm.import_policy=hostid zbm.set_hostid ro quiet loglevel=0"
        echo "EOF"
        echo "fi"
        echo "arch-chroot /mnt generate-zbm --debug"
        echo
        echo "arch-chroot /mnt sh <<EOF"
        echo "  pacman -S --noconfirm ufw"
        echo "  ufw default allow outgoing"
        echo "  ufw default deny incoming"
        echo "  ufw status verbose"
        echo "  systemctl enable ufw"
        echo "EOF"
        echo
        echo "# enable network"
        echo "cat > /mnt/etc/systemd/network/20-wired.network <<\"EOF\""
        echo "[Match]"
        echo "Name=en*"
        echo "Name=eth*"
        echo "[Network]"
        echo "DHCP=yes"
        echo "EOF"
        echo "arch-chroot /mnt systemctl enable systemd-resolved"
        echo "arch-chroot /mnt systemctl enable systemd-networkd"
        echo
        echo "arch-chroot /mnt pacman -S --noconfirm iwd"
        echo "mkdir /mnt/etc/iwd"
        echo "cat > /mnt/etc/iwd/main.conf <<\"EOF\""
        echo "[General]"
        echo "UseDefaultInterface=true"
        echo "EnableNetworkConfiguration=true"
        echo "EOF"
        echo "arch-chroot /mnt systemctl enable iwd"
        echo
        echo "arch-chroot /mnt bash <<EOF"
        echo "  pacman -S --noconfirm xorg-server xorg-xinit mesa xterm xorg-xbacklight xsel"
        echo "  if [ "\$ISINTEL" != \"true\" ]; then pacman -S --noconfirm xf86-video-intel libva-intel-driver; fi;"
        echo "  pacman -S --noconfirm xf86-input-synaptics"
        echo
        echo "  pacman -S --noconfirm alsa-utils ttf-fira-code ttf-freefont ttf-arphic-uming ttf-baekmuk pulseaudio"
        echo "  pacman -S --noconfirm wezterm"
        echo
        echo "  pacman -S --noconfirm sddm; systemctl enable sddm.service"
        echo "  # acpid for battery status"
        echo "  pacman -S --noconfirm acpi acpid; systemctl enable acpid"
        echo
        echo "  pacman -S --noconfirm awesome nemo rofi arc-icon-theme && su \$USERNAME -c 'paru -S --noconfirm iwgtk'"
        echo "  #su \$USERNAME -c 'paru -S --noconfirm dwm-git'"
        echo "  #pacman -S --noconfirm bspwm sxhkd wmctrl xorg-xprop xorg-xsetroot"
        echo "  #su \$USERNAME -c 'paru -S --noconfirm lemonbar-git'"
        echo "  #pacman -S --noconfirm gnome gdm gnome-tweak-tool; systemctl enable gdm"
        echo "  #pacman -S --noconfirm xfce4"
        echo "  #pacman -S --noconfirm plasma konsole"
        echo
        echo "  #pacman -S --noconfirm firefox"
        echo "  su \$USERNAME -c 'paru -S --noconfirm google-chrome'"
        echo
        echo "  #xbacklight -set 100"
        echo
        echo "  # Virtual box guest"
        echo "  pacman -S --noconfirm virtualbox-guest-utils"
        echo "  echo -e 'vboxguest\nvboxsf\nvboxvideo' > /etc/modules-load.d/virtualbox.conf"
        echo "  systemctl enable vboxservice.service"
        echo
        echo "  pacman -S --noconfirm fuse"
        echo
        echo "  ### DEV##"
        echo "  pacman -S --noconfirm age lua gvim git openssh tmux unzip wget ripgrep fzf man flameshot libz3 github-cli tree zoxide"
        echo "  pacman -S --noconfirm virtualbox linux-headers vagrant remmina freerdp"
        echo "  pacman -S --noconfirm rust rust-src rust-analyzer cargo-edit cargo-outdated cargo-watch"
        echo "  su \$USERNAME -c 'paru -S --noconfirm cargo-aur-bin'"
        echo "  pacman -S --noconfirm docker; usermod -aG docker \$USERNAME; systemctl enable docker.service"
        echo "EOF"
        echo
        echo "arch-chroot /mnt bash <<EOF"
        echo "  pacman -S --noconfirm git"
        echo "  cd /home/\$USERNAME"
        echo "  curl -Lk https://github.com/ubnt-intrepid/dot/releases/download/v0.1.4/dot-v0.1.4-x86_64-unknown-linux-musl.tar.gz -o dot.tar.gz"
        echo "  tar -xvf ./dot.tar.gz"
        echo "  rm ./dot.tar.gz"
        echo "  mv ./dot /bin/"
        echo "  if [ \$DOTFILESREPO != \"\" ]; then su \$USERNAME -c 'dot init \$DOTFILESREPO'; cd .dotfiles; git submodule update --init --recursive; fi;"
        echo "EOF"
        echo
        echo "arch-chroot /mnt su \$USERNAME -c 'paru -S --noconfirm zrepl-bin'"
        echo "mkdir -p /mnt/etc/zrepl"
        echo "cat > /mnt/etc/zrepl/zrepl.yml <<\"EOF\""
        echo "jobs:"
        echo "- name: snapjob"
        echo "  type: snap"
        echo "  filesystems: {"
        echo "    \"zroot<\": true,"
        echo "    \"zroot/data/var/tmp\": false,"
        echo "    \"zroot/data/var/cache\": false,"
        echo "    \"zroot/tmp\": false,"
        echo "  }"
        echo "  snapshotting:"
        echo "    type: periodic"
        echo "    interval: 15m"
        echo "    prefix: zrepl_"
        echo "  pruning:"
        echo "    keep:"
        echo "    # fade-out scheme for snapshots starting with zrepl_"
        echo "      - type: grid"
        echo "        grid: 1x1h(keep=all) | 24x1h | 30x1d | 6x30d"
        echo "        regex: \"^zrepl_.*\""
        echo "      # keep all snapshots that don't have the zrepl_ prefix"
        echo "      - type: regex"
        echo "        negate: true"
        echo "        regex: \"^zrepl_.*\""
        echo "EOF"
        echo "arch-chroot /mnt systemctl enable zrepl"
        echo
        echo "cat > /mnt/bin/zfs-recursive-rollback <<\"EOF\""
        echo "#!/usr/bin/env bash"
        echo "# Credit: https://gist.github.com/canthony/90f603dc40dbcdf60cc2d3ca78459c7f"
        echo "usage() {"
        echo "  echo \"Usage: \\\$0 zpool/root@snapshot\""
        echo "}"
        echo "if [ \$# -ne 1 ]"
        echo "then"
        echo "  usage;"
        echo "else"
        echo "  regex=\"^([a-zA-Z0-9/\\.\\_\\-]*)\\@(.*)\""
        echo "  if [[ ! \$1 =~ \$regex ]]; then"
        echo "    usage;"
        echo "  else"
        echo "    pool=\"\${BASH_REMATCH[1]#/}\""
        echo "    root_snapshot=\"\${BASH_REMATCH[2]}\""
        echo "    echo Restoring \${root_snapshot} in \${pool}"
        echo "    while IFS= read -r snapshot; do"
        echo "      echo -n \"Rolling Back \${snapshot} : \""
        echo "      zfs rollback -r -R -f \${snapshot}"
        echo "      echo \"Done\""
        echo "    done < <(zfs list -H -t snapshot -r \$pool | grep \"@\$root_snapshot\" | cut -f 1)"
        echo "  fi"
        echo "fi"
        echo "EOF"
        echo "chmod +x /mnt/bin/zfs-recursive-rollback"
        echo
        echo "arch-chroot /mnt su \$USERNAME -c 'paru -Syu --noconfirm'"
        echo
        echo "# create user password"
        echo "arch-chroot /mnt sh <<EOF"
        echo "  echo \"\$USERNAME:\$USERPASSWORD\" | chpasswd"
        echo "EOF"
        echo
        echo "# disallow root login"
        echo "arch-chroot /mnt passwd -l root"
        echo
        echo "arch-chroot /mnt zfs snapshot -r zroot@install"
        echo
        echo "zfs umount -a"
        echo "umount -R /mnt"
        echo "zpool export zroot"
        echo
        echo "echo \"OS setup complete. Please 'reboot' your machine.\""
    ) > "$INSTALL_SCRIPT"
    chmod +x "$INSTALL_SCRIPT"
}

write_script

# open editor to review and make last changes to the script
"$EDITOR" "$INSTALL_SCRIPT"
reset

clear

read -p "Are you sure you want to run the archlinux installer script (YES is capital letter to run): " RUN_INSTALLER
if [ "$RUN_INSTALLER" == "YES" ]; then
    bash "$INSTALL_SCRIPT"
else
    echo "Cancelling installation"
fi
